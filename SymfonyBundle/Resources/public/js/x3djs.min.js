X3d=function(){};X3d.createMaterial=function(a){return new THREE.MeshLambertMaterial(a)};X3d.setCreateMaterialCallback=function(a){X3d.createMaterial=a};X3d.transformObjectByMatrix=function(a,b){if(a instanceof THREE.Object3D){a.applyMatrix(b);if(a instanceof THREE.SpotLight){a.target.position.applyMatrix4(b)}}};X3d.Node=function(a){this.node=a};X3d.Node.getInstance=function(b){var a=b.prop("tagName"),c=null;switch(a){case"NavigationInfo":c=new X3d.NavigationInfoNode(b);break;case"Background":c=new X3d.BackgroundNode(b);break;case"Scene":c=new X3d.SceneNode(b);break;case"Transform":c=new X3d.TransformNode(b);break;case"Group":c=new X3d.GroupNode(b);break;case"Shape":c=new X3d.ShapeNode(b);break;case"DirectionalLight":c=new X3d.DirectionalLightNode(b);break;case"PointLight":c=new X3d.PointLightNode(b);break;case"SpotLight":c=new X3d.SpotLightNode(b);break;case"Viewpoint":c=new X3d.ViewpointNode(b);break;case"Appearance":c=new X3d.AppearanceNode(b);break;case"Material":c=new X3d.MaterialNode(b);break;case"LineProperties":c=new X3d.LinePropertiesNode(b);break;case"ImageTexture":c=new X3d.ImageTextureNode(b);break;case"TextureTransform":c=new X3d.TextureTransformNode(b);break;case"IndexedFaceSet":c=new X3d.IndexedFaceSetNode(b);break;case"IndexedLineSet":c=new X3d.IndexedLineSetNode(b);break;case"Coordinate":c=new X3d.CoordinateNode(b);break;case"TextureCoordinate":c=new X3d.TextureCoordinateNode(b);break;case"Color":c=new X3d.ColorNode(b);break;default:throw new X3d.UnknownNodeException(a)}return c};X3d.Node.parse=function(b){var a=b.attr("DEF")||b.attr("USE"),d,e,c;if(a&&X3d.sceneLoader.cachedNodes[a]){c=X3d.sceneLoader.cachedNodes[a];console.log("cached node: "+a)}else{if(b.attr("USE")){d=X3d.x3dSceneNode.find('[DEF="'+b.attr("USE")+'"]')}else{d=b}e=X3d.Node.getInstance(d);c=e.parse();if(a){X3d.sceneLoader.cachedNodes[a]=c}}return c};X3d.Node.prototype.parseArray=function(d,c){var b,a;b=d.replace(/\s+/g," ");b=b.replace(/^\s+/,"");b=b.replace(/\s+$/,"");a=b.split(" ");return a.map(c)};X3d.Node.prototype.parseIntArray=function(a){return this.parseArray(a,function(b){return parseInt(b)})};X3d.Node.prototype.parseFloatArray=function(a){return this.parseArray(a,function(b){return parseFloat(b)})};X3d.Node.prototype.parseVector2=function(b){var a=this.parseFloatArray(b);return new THREE.Vector2(a[0],a[1])};X3d.Node.prototype.parseVector2Array=function(d){var c=this.parseFloatArray(d),e=c.length,b=[],a=0;while(a<e){b.push(new THREE.Vector2(c[a],c[a+1]));a=a+2}return b};X3d.Node.prototype.parseVector3=function(b){var a=this.parseFloatArray(b);return new THREE.Vector3(a[0],a[1],a[2])};X3d.Node.prototype.parseVector3Array=function(d){var c=this.parseFloatArray(d),e=c.length,b=[],a=0;while(a<e){b.push(new THREE.Vector3(c[a],c[a+1],c[a+2]));a=a+3}return b};X3d.SceneLoader=function(){this.cachedNodes={};this.background={};this.scene=null;this.sceneCamera=null;this.lights=[];this.textureTree=new X3d.TextureTree()};X3d.SceneLoader.prototype.loadSceneFromX3d=function(d,b,c){var a=this;a.cachedNodes={};a.background={};a.sceneCamera=null;a.lights=[];X3d.sceneLoader=a;$.ajax({url:d,type:"GET",async:(typeof b==="function"),cache:false,timeout:30000,data:{},success:function(f){try{X3d.x3dSceneNode=$(f).find("Scene");a.scene=X3d.Node.parse(X3d.x3dSceneNode);a.lights.forEach(function(e){a.scene.add(e)});a.textureTree.evaluateCallbacks()}catch(g){if(c){c(g)}else{throw g}}if(b){b()}},error:function(e){var f="Could not load scene from file "+d+"!";if(c){c(f)}else{throw new X3d.Exception(f)}}})};X3d.SceneLoader.prototype.loadTextureTreeFromXml=function(b,c,d){var a=this;a.textureTree=new X3d.TextureTree();$.ajax({url:b,type:"GET",async:(typeof c==="function"),cache:false,timeout:30000,data:{},success:function(f){try{a.textureTree.loadFromXml($(f))}catch(g){if(d){d(g)}else{throw g}}if(c){c()}},error:function(e){var f="Could not load texture tree from file "+b+"!";if(d){d(f)}else{throw new X3d.Exception(f)}}})};X3d.SceneLoader.prototype.unloadTextureTree=function(){this.textureTree=new X3d.TextureTree()};X3d.SceneLoader.prototype.getScene=function(){return this.scene};X3d.SceneLoader.prototype.getCamera=function(){return this.sceneCamera};X3d.SceneLoader.prototype.getLights=function(){return this.lights};X3d.SceneLoader.prototype.hasNode=function(a){return(this.cachedNodes[a]!==null)};X3d.SceneLoader.prototype.getNode=function(a){return this.cachedNodes[a]};X3d.TextureTree=function(){this.textures={}};X3d.TextureTree.getTextureIdByName=function(a){return a.replace(".","_")};X3d.TextureTree.prototype.loadFromXml=function(c){var b=this,a=c.find("textures");b.textures={};a.children().each(function(){b.parseTextureNode(b,$(this),null)})};X3d.TextureTree.prototype.parseTextureNode=function(a,c,g){var e,f,d={},b;e=c.attr("name");if(!e){throw new X3d.InvalidTextureException("Attribute name is mandatory")}d.name=e;f=X3d.TextureTree.getTextureIdByName(d.name);e=c.attr("url");if(!g&&!e){throw new X3d.InvalidTextureException("Attribute url is mandatory for root level textures")}d.url=e;e=c.attr("width");if(!e){throw new X3d.InvalidTextureException("Attribute width is mandatory")}d.width=parseInt(e);e=c.attr("height");if(!e){throw new X3d.InvalidTextureException("Attribute height is mandatory")}d.height=parseInt(e);e=c.attr("left");if(e){d.left=parseInt(e)}e=c.attr("top");if(e){d.top=parseInt(e)}if(g){d.parentId=g;b=a.textures[g];if(b.parentId){throw new X3d.Exception("Texture tree can only have hierarchy depth <= 2!")}d.ub=d.left/b.width;d.ua=d.width/b.width;d.vb=1-(d.height+d.top)/b.height;d.va=d.height/b.height}else{d.callbacks=[]}a.textures[f]=d;c.children().each(function(){a.parseTextureNode(a,$(this),f)})};X3d.TextureTree.prototype.loadTexture=function(d,c){var f=X3d.TextureTree.getTextureIdByName(d.name),b,a,e=null;if(this.textures[f]){if(this.textures[f].parentId){b=this.textures[f].parentId;if(this.textures[b]){a=this.textures[b];console.log("texture "+f+" found in tree, loading parent url "+a.url)}}else{a=this.textures[f];console.log("root level texture "+f+" found in tree, loading url "+a.url)}}else{this.textures[f]={name:d.name,url:d.url,callbacks:[]};a=this.textures[f];console.log("texture "+f+" not found in tree, loading "+a.url)}if(a.url&&!a.parentId){if(!a.data){a.data=new THREE.Texture(undefined,THREE.UVMapping);a.data.sourceFile=a.url}a.callbacks.push(c)}return a.data};X3d.TextureTree.prototype.evaluateCallbacks=function(){var a=this,b;for(var c in a.textures){(function(f){var e=a.textures[f],d=new THREE.ImageLoader();if(!e.parentId&&e.callbacks.length>0){d.load(e.url,function(g){e.data.image=g;e.data.needsUpdate=true;e.callbacks.forEach(function(h){h(e.data)})})}}(c))}};X3d.TextureTree.prototype.getAbsoluteCoordinates=function(b,f){var g=X3d.TextureTree.getTextureIdByName(b),e,d,c,a=[];console.log("texture UVs: "+JSON.stringify(f));if(this.textures[g]&&this.textures[g].parentId){console.log("texture "+b+"(id="+g+") has parent with id="+this.textures[g].parentId);e=this.textures[g];f.forEach(function(h){d=e.ua*h.x+e.ub;if(d<0){d=0}if(d>1){d=1}c=e.va*h.y+e.vb;if(c<0){c=0}if(c>1){c=1}a.push(new THREE.Vector2(d,c))})}else{console.log("texture "+b+" (id="+g+") has no parent");a=f}console.log("absolute UVs: "+JSON.stringify(a));return a};X3d.Exception=function(a){this.name="Exception";this.message=a};X3d.Exception.prototype.getMessage=function(){return this.message};X3d.InvalidTextureException=function(a){X3d.Exception.call(this,a);this.name="X3dInvalidTextureException";this.message="Invalid texture";if(a){this.message=this.message+": "+a}};X3d.InvalidTextureException.prototype=Object.create(X3d.Exception.prototype);X3d.UnknownNodeException=function(a){X3d.Exception.call(this,a);this.name="X3dUnknownNodeException";this.message="Unknown X3D node";if(a){this.message=this.message+": "+a}};X3d.UnknownNodeException.prototype=Object.create(X3d.Exception.prototype);X3d.GeometryNode=function(a){X3d.Node.call(this,a)};X3d.GeometryNode.prototype=Object.create(X3d.Node.prototype);X3d.GeometryNode.prototype.createMesh=function(a){};X3d.LightNode=function(a){X3d.Node.call(this,a)};X3d.LightNode.prototype=Object.create(X3d.Node.prototype);X3d.LightNode.prototype.parseBasicLightProperties=function(){var d,b,a,c;console.log("parsing X3D light");d=this.node.attr("on");if(d){this.on=(d=="TRUE")}else{this.on=true}this.color=new THREE.Color();d=this.node.attr("color");if(d){b=this.parseFloatArray(d);this.color.setRGB(b[0],b[1],b[2])}else{this.color.setRGB(1,1,1)}d=this.node.attr("intensity");if(d){b=this.parseFloatArray(d);this.intensity=b[0]}else{this.intensity=1}d=this.node.attr("ambientIntensity");if(d){b=this.parseFloatArray(d);a=b[0];if(a>0){console.log("adding ambient light component with intensity "+a);c=new THREE.Color();c.copy(this.color);c.multiplyScalar(a);X3d.sceneLoader.lights.push(new THREE.AmbientLight(c.getHex()))}}};X3d.AppearanceNode=function(a){X3d.Node.call(this,a)};X3d.AppearanceNode.prototype=Object.create(X3d.Node.prototype);X3d.AppearanceNode.prototype.parse=function(){var a=this;console.log("parsing X3D appearance");a.node.children().each(function(){var d,b=$(this);try{d=X3d.Node.parse(b);if(d instanceof X3d.MaterialNode){a.material=d}else{if(d instanceof X3d.LinePropertiesNode){a.lineProperties=d}else{if(d instanceof X3d.ImageTextureNode){a.texture=d}else{if(d instanceof X3d.TextureTransformNode){a.textureTransform=d}}}}}catch(c){throw c}});return a};X3d.AppearanceNode.prototype.getMaterialProperties=function(){var a=this,c={},d,b=(a.material.transparency&&a.material.transparency>0);c.shading=THREE.SmoothShading;c.vertexColors=THREE.VertexColors;if(a.material.solid){c.side=THREE.FrontSide}else{c.side=THREE.DoubleSide}if(a.texture&&a.texture.name){d=X3d.sceneLoader.textureTree.loadTexture(a.texture,function(e){d.needsUpdate=true});c.map=d}if(b){c.transparent=b;c.opacity=1-a.material.transparency}return c};X3d.BackgroundNode=function(a){X3d.Node.call(this,a)};X3d.BackgroundNode.prototype=Object.create(X3d.Node.prototype);X3d.BackgroundNode.prototype.parse=function(){var b={},c,a;console.log("parsing X3D background");b.groundColor=new THREE.Color();c=this.node.attr("groundColor");if(c){a=this.parseFloatArray(c);b.groundColor.setRGB(a[0],a[1],a[2])}else{b.groundColor.setRGB(0,0,0)}b.skyColor=new THREE.Color();c=this.node.attr("skyColor");if(c){a=this.parseFloatArray(c);b.skyColor.setRGB(a[0],a[1],a[2])}else{b.skyColor.setRGB(0,0,0)}X3d.background=b;console.log("background: "+JSON.stringify(b));return null};X3d.ColorNode=function(a){X3d.Node.call(this,a)};X3d.ColorNode.prototype=Object.create(X3d.Node.prototype);X3d.ColorNode.prototype.parse=function(){var b=this,d,c,a;b.colors=[];console.log("parsing X3D color");d=this.node.attr("color");if(d){c=this.parseVector3Array(d);c.forEach(function(e){a=new THREE.Color();a.setRGB(e.x,e.y,e.z);b.colors.push(a)})}return b};X3d.CoordinateNode=function(a){X3d.Node.call(this,a)};X3d.CoordinateNode.prototype=Object.create(X3d.Node.prototype);X3d.CoordinateNode.prototype.parse=function(){var a=this,b;console.log("parsing X3D coordinate");b=this.node.attr("point");if(b){a.coordinates=this.parseVector3Array(b)}else{a.coordinates=[]}return a};X3d.DirectionalLightNode=function(a){X3d.LightNode.call(this,a)};X3d.DirectionalLightNode.prototype=Object.create(X3d.LightNode.prototype);X3d.DirectionalLightNode.prototype.parse=function(){var c,b,a;console.log("parsing X3D directional light");this.parseBasicLightProperties();c=this.node.attr("direction");if(c){this.direction=this.parseVector3(c)}a=new THREE.DirectionalLight(this.color.getHex(),this.intensity);a.position=this.direction;a.position.negate();return a};X3d.GroupNode=function(a){X3d.Node.call(this,a)};X3d.GroupNode.prototype=Object.create(X3d.Node.prototype);X3d.GroupNode.prototype.parse=function(){var a=new THREE.Object3D(),b;console.log("parsing X3D group "+this.node.attr("DEF"));this.node.children().each(function(){try{b=X3d.Node.parse($(this));a.add(b)}catch(c){throw c}});return a};X3d.ImageTextureNode=function(a){X3d.Node.call(this,a)};X3d.ImageTextureNode.prototype=Object.create(X3d.Node.prototype);X3d.ImageTextureNode.prototype.parse=function(){var a=this,b,c;console.log("parsing X3D image texture");b=this.node.attr("url");if(b){c=/(\"|\')([^\s]+)(?:\1)\s+(\"|\')([^\s]+)(?:\3)/.exec(b);a.url=c[2];a.name=c[4]}return a};X3d.IndexedFaceSetNode=function(a){X3d.GeometryNode.call(this,a)};X3d.IndexedFaceSetNode.prototype=Object.create(X3d.GeometryNode.prototype);X3d.IndexedFaceSetNode.prototype.parse=function(){var a=this,e,c,d,b;console.log("parsing X3D indexed face set");c=a.node.attr("solid");if(c){a.solid=(c==="true")}else{a.solid=false}c=a.node.attr("creaseAngle");if(c){b=a.parseFloatArray(c);a.creaseAngle=b[0]}else{a.creaseAngle=0}c=a.node.attr("coordIndex");if(c){a.coordIndex=a.parseIntArray(c)}c=a.node.attr("texCoordIndex");if(c){a.texCoordIndex=a.parseIntArray(c)}a.node.children().each(function(){var f=$(this);try{e=X3d.Node.parse(f);if(e instanceof X3d.CoordinateNode){a.vertexCoordinates=e.coordinates}else{if(e instanceof X3d.TextureCoordinateNode){a.textureCoordinates=e.coordinates}}}catch(g){throw g}});return a};X3d.IndexedFaceSetNode.prototype.createMesh=function(d){var l=this,i=new THREE.Geometry(),f=[],h=[0,0,0],g,b=0,j,c=function(m,p,r,o,q){var n=m.normal.dot(r.normal)/(m.normal.length()*r.normal.length());if(n>=q){m.vertexNormals[p].add(r.normal);r.vertexNormals[o].add(m.normal)}},a=function(s,o,n,r){var q=X3d.sceneLoader.textureTree.getAbsoluteCoordinates(r.name,n),m=[0,0,0],p=0;console.log("creating UV coordinates: "+JSON.stringify(o)+", "+JSON.stringify(n));o.forEach(function(t){if(t>=0){if(p<3){m[p]=t;p++}if(p==3){s.faceVertexUvs[0].push([new THREE.Vector2(q[m[0]].x,q[m[0]].y),new THREE.Vector2(q[m[1]].x,q[m[1]].y),new THREE.Vector2(q[m[2]].x,q[m[2]].y)]);m[1]=t;p=2}}else{p=0}})},k=function(o,q){var u={},x,y,w,p,n,m;console.log("computing vertex normals ...");x=0;o.forEach(function(z){if(!(z.a in u)){u[z.a]={}}u[z.a][x]=0;if(!(z.b in u)){u[z.b]={}}u[z.b][x]=1;if(!(z.c in u)){u[z.c]={}}u[z.c][x]=2;x++});for(var t in u){w=u[t];y=[];for(var v in w){y.push(v)}p=y.length;for(var s=0;s<p;s++){for(var r=s+1;r<p;r++){n=y[s];m=y[r];c(o[n],w[n],o[m],w[m],q)}}}o.forEach(function(z){z.vertexNormals.forEach(function(A){A.normalize()})})},e=function(q,o){var r={},m=0,n;q.faces.forEach(function(s){r[s.a]=0;r[s.b]=0;r[s.c]=0});for(var p in r){m++}q.vertices=[];if(m<o.length){n=0;for(var p in r){q.vertices.push(o[p].clone());r[p]=n;n++}q.faces.forEach(function(s){s.a=r[s.a];s.b=r[s.b];s.c=r[s.c]});console.log("creating geometry vertices: reduced: "+m+" of "+o.length);console.log(JSON.stringify(r))}else{console.log("creating geometry vertices: all: "+o.length);o.forEach(function(s){q.vertices.push(s.clone())})}};console.log("creating face geometry...");if(typeof d.material==="undefined"){console.log("no material found, adding standard material");d.material={diffuseColor:new THREE.Color()};d.material.diffuseColor.setRGB(1,1,1)}if(d.material.diffuseColor){j=d.material.diffuseColor}else{j=d.material.emissiveColor}d.material.solid=l.solid;i.faces=[];l.coordIndex.forEach(function(m){if(m>=0){if(b<3){h[b]=m;b++}if(b===3){g=new THREE.Face3(h[0],h[1],h[2]);i.faces.push(g);h[1]=m;b=2}}else{b=0}});l.vertexCoordinates.forEach(function(m){f.push(m.clone())});e(i,f);i.faceVertexUvs[0]=[];i.computeFaceNormals();i.computeCentroids();i.faces.forEach(function(m){m.vertexNormals=[m.normal.clone(),m.normal.clone(),m.normal.clone()];m.vertexColors=[j.clone(),j.clone(),j.clone()]});if(l.creaseAngle>0){k(i.faces,Math.cos(l.creaseAngle))}if(d.texture&&l.textureCoordinates.length>0&&l.texCoordIndex.length>0){a(i,l.texCoordIndex,l.textureCoordinates,d.texture)}return new THREE.Mesh(i,X3d.createMaterial(d.getMaterialProperties()))};X3d.IndexedLineSetNode=function(a){X3d.GeometryNode.call(this,a)};X3d.IndexedLineSetNode.prototype=Object.create(X3d.GeometryNode.prototype);X3d.IndexedLineSetNode.prototype.parse=function(){var a=this,c,b;console.log("parsing X3D indexed line set");b=a.node.attr("coordIndex");if(b){a.coordIndex=a.parseIntArray(b)}b=this.node.attr("colorIndex");if(b){a.colorIndex=a.parseIntArray(b)}a.node.children().each(function(){var d=$(this);try{c=X3d.Node.parse(d);if(c instanceof X3d.CoordinateNode){a.vertexCoordinates=c.coordinates}else{if(c instanceof X3d.ColorNode){a.vertexColors=c.colors}}}catch(f){throw f}});return a};X3d.IndexedLineSetNode.prototype.createMesh=function(c){var h=this,j=new THREE.Object3D(),a,f=0,g=0,i=0,e,b={},d=function(){j.add(new THREE.Line(a,new THREE.LineBasicMaterial(b)));f=0;g++};console.log("creating line strips...");if(h.colorIndex&&h.vertexColors){b.vertexColors=THREE.VertexColors}else{if(c.material&&c.material.emissiveColor){b.color=c.material.emissiveColor.getHex()}else{b.color=16777215}}if(c.lineProperties&&c.lineProperties.lineWidth){b.linewidth=c.lineProperties.lineWidth}else{b.linewidth=1}if(c.material&&c.material.transparency&&c.material.transparency>0){b.transparent=true;b.opacity=1-c.material.transparency}h.coordIndex.forEach(function(l){var k;if(l>=0){if(f==0){a=new THREE.Geometry();a.vertices=[];a.colors=[]}a.vertices.push(new THREE.Vector3(h.vertexCoordinates[l].x,h.vertexCoordinates[l].y,h.vertexCoordinates[l].z));if(h.colorIndex&&h.vertexColors){e=h.colorIndex[i];k=new THREE.Color();k.setRGB(h.vertexColors[e].r,h.vertexColors[e].g,h.vertexColors[e].b);a.colors.push(k)}f++}else{if(f>0){d()}}i++});if(f>0){d()}return j};X3d.LinePropertiesNode=function(a){X3d.Node.call(this,a)};X3d.LinePropertiesNode.prototype=Object.create(X3d.Node.prototype);X3d.LinePropertiesNode.prototype.parse=function(){var b=this,c,a;console.log("parsing X3D line properties");c=this.node.attr("applied");if(c){b.applied=(c=="TRUE")}else{b.applied=false}c=this.node.attr("linetype");if(c){a=this.parseIntArray(c);b.lineType=a[0]}else{b.lineType=1}c=this.node.attr("linewidthScaleFactor");if(c){a=this.parseFloatArray(c);b.lineWidth=Math.max(1,a[0])}else{b.lineWidth=1}return b};X3d.MaterialNode=function(a){X3d.Node.call(this,a)};X3d.MaterialNode.prototype=Object.create(X3d.Node.prototype);X3d.MaterialNode.prototype.parse=function(){var b=this,c,a;console.log("parsing X3D material");c=this.node.attr("diffuseColor");if(c){a=this.parseFloatArray(c);b.diffuseColor=new THREE.Color();b.diffuseColor.setRGB(a[0],a[1],a[2])}c=this.node.attr("specularColor");if(c){a=this.parseFloatArray(c);b.specularColor=new THREE.Color();b.specularColor.setRGB(a[0],a[1],a[2])}c=this.node.attr("emissiveColor");if(c){a=this.parseFloatArray(c);b.emissiveColor=new THREE.Color();b.emissiveColor.setRGB(a[0],a[1],a[2])}c=this.node.attr("ambientIntensity");if(c){a=this.parseFloatArray(c);b.ambientIntensity=a[0]}c=this.node.attr("shininess");if(c){a=this.parseFloatArray(c);b.shininess=a[0]}c=this.node.attr("transparency");if(c){a=this.parseFloatArray(c);b.transparency=a[0]}return b};X3d.NavigationInfoNode=function(a){X3d.Node.call(this,a)};X3d.NavigationInfoNode.prototype=Object.create(X3d.Node.prototype);X3d.NavigationInfoNode.prototype.parse=function(){console.log("parsing X3D navigation info");return null};X3d.PointLightNode=function(a){X3d.LightNode.call(this,a)};X3d.PointLightNode.prototype=Object.create(X3d.LightNode.prototype);X3d.PointLightNode.prototype.parse=function(){var c,b,a;console.log("parsing X3D point light");this.parseBasicLightProperties();c=this.node.attr("radius");if(c){b=this.parseFloatArray(c);this.distance=b[0]}else{this.distance=0}a=new THREE.PointLight(this.color.getHex(),this.intensity,this.distance);return a};X3d.SceneNode=function(a){X3d.Node.call(this,a)};X3d.SceneNode.prototype=Object.create(X3d.Node.prototype);X3d.SceneNode.prototype.parse=function(){var a=new THREE.Scene(),b;console.log("parsing X3D scene");this.node.children().each(function(){try{b=X3d.Node.parse($(this));if(b!==null){a.add(b)}}catch(c){throw c}});return a};X3d.ShapeNode=function(a){X3d.Node.call(this,a)};X3d.ShapeNode.prototype=Object.create(X3d.Node.prototype);X3d.ShapeNode.prototype.parse=function(){var d,a={},b=[],c=null;console.log("parsing X3D shape");this.node.children().each(function(){try{d=X3d.Node.parse($(this));if(d instanceof X3d.AppearanceNode){a=d;console.log("appearance: "+JSON.stringify(a))}else{if(d instanceof X3d.GeometryNode){b.push(d);console.log("geometry node: "+JSON.stringify(d))}}}catch(f){throw f}});b.forEach(function(e){c=e.createMesh(a)});return c};X3d.SpotLightNode=function(a){X3d.LightNode.call(this,a)};X3d.SpotLightNode.prototype=Object.create(X3d.LightNode.prototype);X3d.SpotLightNode.prototype.parse=function(){var c,b,a;console.log("parsing X3D spot light");this.parseBasicLightProperties();c=this.node.attr("location");if(c){this.location=this.parseVector3(c)}c=this.node.attr("direction");if(c){this.direction=this.parseVector3(c)}c=this.node.attr("radius");if(c){b=this.parseFloatArray(c);this.distance=b[0]}c=this.node.attr("beamWidth");if(c){b=this.parseFloatArray(c);this.beamWidth=b[0]}c=this.node.attr("cutOffAngle");if(c){b=this.parseFloatArray(c);this.angle=b[0]}c=this.node.attr("attenuation");if(c){this.attenuation=this.parseFloatArray(c)}this.exponent=1;a=new THREE.SpotLight(this.color.getHex(),this.intensity,this.distance,this.angle,this.exponent);a.position.copy(this.location);a.target.position.copy(this.location);a.target.position.add(this.direction);console.log("spotlight node: "+JSON.stringify(this));console.log("spotlight target: "+JSON.stringify(a.target.position));return a};X3d.TextureCoordinateNode=function(a){X3d.Node.call(this,a)};X3d.TextureCoordinateNode.prototype=Object.create(X3d.Node.prototype);X3d.TextureCoordinateNode.prototype.parse=function(){var a=this,b;console.log("parsing X3D texture coordinates");b=this.node.attr("point");if(b){a.coordinates=this.parseVector2Array(b)}else{a.coordinates=[]}return a};X3d.TextureTransformNode=function(a){X3d.Node.call(this,a)};X3d.TextureTransformNode.prototype=Object.create(X3d.Node.prototype);X3d.TextureTransformNode.prototype.parse=function(){var b=this,c,a;console.log("parsing X3D texture transform");c=this.node.attr("translation");if(c){b.transform=this.parseVector2(c)}c=this.node.attr("scale");if(c){b.scale=this.parseVector2(c)}c=this.node.attr("rotation");if(c){a=this.parseFloatArray(c);b.rotation=a[0]}return b};X3d.TransformNode=function(a){X3d.Node.call(this,a)};X3d.TransformNode.prototype=Object.create(X3d.Node.prototype);X3d.TransformNode.prototype.parse=function(){var d=this,c=new THREE.Object3D(),e,b,a,g,f,h;console.log("parsing X3D transform "+d.node.attr("DEF"));h=new THREE.Matrix4();e=d.node.attr("rotation");if(e){b=this.parseFloatArray(e);f=new THREE.Quaternion();f.setFromAxisAngle(new THREE.Vector3(b[0],b[1],b[2]),b[3]);h.makeRotationFromQuaternion(f);console.log("rotation: "+JSON.stringify(f)+", raw="+JSON.stringify(b))}else{h.identity()}e=d.node.attr("scale");if(e){g=d.parseVector3(e);h.scale(g);console.log("scale: "+JSON.stringify(g))}e=d.node.attr("translation");if(e){a=d.parseVector3(e);h.setPosition(a);console.log("translation: "+JSON.stringify(a))}this.node.children().each(function(){var j;try{j=X3d.Node.parse($(this));if(j instanceof THREE.Camera){X3d.transformObjectByMatrix(j,h);X3d.sceneLoader.sceneCamera=j}else{if(j instanceof THREE.Light){X3d.transformObjectByMatrix(j,h);X3d.sceneLoader.lights.push(j)}else{c.add(j)}}}catch(i){throw i}});if(c.children.length>0){c.applyMatrix(h)}else{c=null}return c};X3d.ViewpointNode=function(a){X3d.Node.call(this,a)};X3d.ViewpointNode.prototype=Object.create(X3d.Node.prototype);X3d.ViewpointNode.prototype.parse=function(d){var b,c,a,e;console.log("parsing X3D viewpoint (camera)");c=this.node.attr("fieldOfView");if(c){a=this.parseFloatArray(c);e=180*a[0]/Math.PI}else{e=45}b=new THREE.PerspectiveCamera(e,4/3,0.1,1000);return b};